/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Beneficiary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Beneficiary{}

// Beneficiary struct for Beneficiary
type Beneficiary struct {
	BeneficiaryPerson []Person `json:"beneficiaryPerson"`
}

type _Beneficiary Beneficiary

// NewBeneficiary instantiates a new Beneficiary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeneficiary(beneficiaryPerson []Person) *Beneficiary {
	this := Beneficiary{}
	this.BeneficiaryPerson = beneficiaryPerson
	return &this
}

// NewBeneficiaryWithDefaults instantiates a new Beneficiary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeneficiaryWithDefaults() *Beneficiary {
	this := Beneficiary{}
	return &this
}

// GetBeneficiaryPerson returns the BeneficiaryPerson field value
func (o *Beneficiary) GetBeneficiaryPerson() []Person {
	if o == nil {
		var ret []Person
		return ret
	}

	return o.BeneficiaryPerson
}

// GetBeneficiaryPersonOk returns a tuple with the BeneficiaryPerson field value
// and a boolean to check if the value has been set.
func (o *Beneficiary) GetBeneficiaryPersonOk() ([]Person, bool) {
	if o == nil {
		return nil, false
	}
	return o.BeneficiaryPerson, true
}

// SetBeneficiaryPerson sets field value
func (o *Beneficiary) SetBeneficiaryPerson(v []Person) {
	o.BeneficiaryPerson = v
}

func (o Beneficiary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Beneficiary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["beneficiaryPerson"] = o.BeneficiaryPerson
	return toSerialize, nil
}

func (o *Beneficiary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"beneficiaryPerson",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBeneficiary := _Beneficiary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBeneficiary)

	if err != nil {
		return err
	}

	*o = Beneficiary(varBeneficiary)

	return err
}

type NullableBeneficiary struct {
	value *Beneficiary
	isSet bool
}

func (v NullableBeneficiary) Get() *Beneficiary {
	return v.value
}

func (v *NullableBeneficiary) Set(val *Beneficiary) {
	v.value = val
	v.isSet = true
}

func (v NullableBeneficiary) IsSet() bool {
	return v.isSet
}

func (v *NullableBeneficiary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeneficiary(val *Beneficiary) *NullableBeneficiary {
	return &NullableBeneficiary{value: val, isSet: true}
}

func (v NullableBeneficiary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeneficiary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


