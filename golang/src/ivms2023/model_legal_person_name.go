/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LegalPersonName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegalPersonName{}

// LegalPersonName struct for LegalPersonName
type LegalPersonName struct {
	NameIdentifier []LegalPersonNameId `json:"nameIdentifier"`
	LocalNameIdentifier []LocalLegalPersonNameId `json:"localNameIdentifier,omitempty"`
	PhoneticNameIdentifier []LocalLegalPersonNameId `json:"phoneticNameIdentifier,omitempty"`
}

type _LegalPersonName LegalPersonName

// NewLegalPersonName instantiates a new LegalPersonName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalPersonName(nameIdentifier []LegalPersonNameId) *LegalPersonName {
	this := LegalPersonName{}
	this.NameIdentifier = nameIdentifier
	return &this
}

// NewLegalPersonNameWithDefaults instantiates a new LegalPersonName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalPersonNameWithDefaults() *LegalPersonName {
	this := LegalPersonName{}
	return &this
}

// GetNameIdentifier returns the NameIdentifier field value
func (o *LegalPersonName) GetNameIdentifier() []LegalPersonNameId {
	if o == nil {
		var ret []LegalPersonNameId
		return ret
	}

	return o.NameIdentifier
}

// GetNameIdentifierOk returns a tuple with the NameIdentifier field value
// and a boolean to check if the value has been set.
func (o *LegalPersonName) GetNameIdentifierOk() ([]LegalPersonNameId, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameIdentifier, true
}

// SetNameIdentifier sets field value
func (o *LegalPersonName) SetNameIdentifier(v []LegalPersonNameId) {
	o.NameIdentifier = v
}

// GetLocalNameIdentifier returns the LocalNameIdentifier field value if set, zero value otherwise.
func (o *LegalPersonName) GetLocalNameIdentifier() []LocalLegalPersonNameId {
	if o == nil || IsNil(o.LocalNameIdentifier) {
		var ret []LocalLegalPersonNameId
		return ret
	}
	return o.LocalNameIdentifier
}

// GetLocalNameIdentifierOk returns a tuple with the LocalNameIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPersonName) GetLocalNameIdentifierOk() ([]LocalLegalPersonNameId, bool) {
	if o == nil || IsNil(o.LocalNameIdentifier) {
		return nil, false
	}
	return o.LocalNameIdentifier, true
}

// HasLocalNameIdentifier returns a boolean if a field has been set.
func (o *LegalPersonName) HasLocalNameIdentifier() bool {
	if o != nil && !IsNil(o.LocalNameIdentifier) {
		return true
	}

	return false
}

// SetLocalNameIdentifier gets a reference to the given []LocalLegalPersonNameId and assigns it to the LocalNameIdentifier field.
func (o *LegalPersonName) SetLocalNameIdentifier(v []LocalLegalPersonNameId) {
	o.LocalNameIdentifier = v
}

// GetPhoneticNameIdentifier returns the PhoneticNameIdentifier field value if set, zero value otherwise.
func (o *LegalPersonName) GetPhoneticNameIdentifier() []LocalLegalPersonNameId {
	if o == nil || IsNil(o.PhoneticNameIdentifier) {
		var ret []LocalLegalPersonNameId
		return ret
	}
	return o.PhoneticNameIdentifier
}

// GetPhoneticNameIdentifierOk returns a tuple with the PhoneticNameIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPersonName) GetPhoneticNameIdentifierOk() ([]LocalLegalPersonNameId, bool) {
	if o == nil || IsNil(o.PhoneticNameIdentifier) {
		return nil, false
	}
	return o.PhoneticNameIdentifier, true
}

// HasPhoneticNameIdentifier returns a boolean if a field has been set.
func (o *LegalPersonName) HasPhoneticNameIdentifier() bool {
	if o != nil && !IsNil(o.PhoneticNameIdentifier) {
		return true
	}

	return false
}

// SetPhoneticNameIdentifier gets a reference to the given []LocalLegalPersonNameId and assigns it to the PhoneticNameIdentifier field.
func (o *LegalPersonName) SetPhoneticNameIdentifier(v []LocalLegalPersonNameId) {
	o.PhoneticNameIdentifier = v
}

func (o LegalPersonName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegalPersonName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nameIdentifier"] = o.NameIdentifier
	if !IsNil(o.LocalNameIdentifier) {
		toSerialize["localNameIdentifier"] = o.LocalNameIdentifier
	}
	if !IsNil(o.PhoneticNameIdentifier) {
		toSerialize["phoneticNameIdentifier"] = o.PhoneticNameIdentifier
	}
	return toSerialize, nil
}

func (o *LegalPersonName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nameIdentifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegalPersonName := _LegalPersonName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegalPersonName)

	if err != nil {
		return err
	}

	*o = LegalPersonName(varLegalPersonName)

	return err
}

type NullableLegalPersonName struct {
	value *LegalPersonName
	isSet bool
}

func (v NullableLegalPersonName) Get() *LegalPersonName {
	return v.value
}

func (v *NullableLegalPersonName) Set(val *LegalPersonName) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalPersonName) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalPersonName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalPersonName(val *LegalPersonName) *NullableLegalPersonName {
	return &NullableLegalPersonName{value: val, isSet: true}
}

func (v NullableLegalPersonName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalPersonName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


