/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
)

// checks if the Person type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Person{}

// Person struct for Person
type Person struct {
	NaturalPerson *NaturalPerson `json:"naturalPerson,omitempty"`
	LegalPerson *LegalPerson `json:"legalPerson,omitempty"`
}

// NewPerson instantiates a new Person object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerson() *Person {
	this := Person{}
	return &this
}

// NewPersonWithDefaults instantiates a new Person object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonWithDefaults() *Person {
	this := Person{}
	return &this
}

// GetNaturalPerson returns the NaturalPerson field value if set, zero value otherwise.
func (o *Person) GetNaturalPerson() NaturalPerson {
	if o == nil || IsNil(o.NaturalPerson) {
		var ret NaturalPerson
		return ret
	}
	return *o.NaturalPerson
}

// GetNaturalPersonOk returns a tuple with the NaturalPerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetNaturalPersonOk() (*NaturalPerson, bool) {
	if o == nil || IsNil(o.NaturalPerson) {
		return nil, false
	}
	return o.NaturalPerson, true
}

// HasNaturalPerson returns a boolean if a field has been set.
func (o *Person) HasNaturalPerson() bool {
	if o != nil && !IsNil(o.NaturalPerson) {
		return true
	}

	return false
}

// SetNaturalPerson gets a reference to the given NaturalPerson and assigns it to the NaturalPerson field.
func (o *Person) SetNaturalPerson(v NaturalPerson) {
	o.NaturalPerson = &v
}

// GetLegalPerson returns the LegalPerson field value if set, zero value otherwise.
func (o *Person) GetLegalPerson() LegalPerson {
	if o == nil || IsNil(o.LegalPerson) {
		var ret LegalPerson
		return ret
	}
	return *o.LegalPerson
}

// GetLegalPersonOk returns a tuple with the LegalPerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetLegalPersonOk() (*LegalPerson, bool) {
	if o == nil || IsNil(o.LegalPerson) {
		return nil, false
	}
	return o.LegalPerson, true
}

// HasLegalPerson returns a boolean if a field has been set.
func (o *Person) HasLegalPerson() bool {
	if o != nil && !IsNil(o.LegalPerson) {
		return true
	}

	return false
}

// SetLegalPerson gets a reference to the given LegalPerson and assigns it to the LegalPerson field.
func (o *Person) SetLegalPerson(v LegalPerson) {
	o.LegalPerson = &v
}

func (o Person) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Person) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NaturalPerson) {
		toSerialize["naturalPerson"] = o.NaturalPerson
	}
	if !IsNil(o.LegalPerson) {
		toSerialize["legalPerson"] = o.LegalPerson
	}
	return toSerialize, nil
}

type NullablePerson struct {
	value *Person
	isSet bool
}

func (v NullablePerson) Get() *Person {
	return v.value
}

func (v *NullablePerson) Set(val *Person) {
	v.value = val
	v.isSet = true
}

func (v NullablePerson) IsSet() bool {
	return v.isSet
}

func (v *NullablePerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerson(val *Person) *NullablePerson {
	return &NullablePerson{value: val, isSet: true}
}

func (v NullablePerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


