/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
	"fmt"
)

// AddressTypeCode the model 'AddressTypeCode'
type AddressTypeCode string

// List of AddressTypeCode
const (
	HOME AddressTypeCode = "HOME"
	BIZZ AddressTypeCode = "BIZZ"
	GEOG AddressTypeCode = "GEOG"
)

// All allowed values of AddressTypeCode enum
var AllowedAddressTypeCodeEnumValues = []AddressTypeCode{
	"HOME",
	"BIZZ",
	"GEOG",
}

func (v *AddressTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddressTypeCode(value)
	for _, existing := range AllowedAddressTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddressTypeCode", value)
}

// NewAddressTypeCodeFromValue returns a pointer to a valid AddressTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddressTypeCodeFromValue(v string) (*AddressTypeCode, error) {
	ev := AddressTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddressTypeCode: valid values are %v", v, AllowedAddressTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddressTypeCode) IsValid() bool {
	for _, existing := range AllowedAddressTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddressTypeCode value
func (v AddressTypeCode) Ptr() *AddressTypeCode {
	return &v
}

type NullableAddressTypeCode struct {
	value *AddressTypeCode
	isSet bool
}

func (v NullableAddressTypeCode) Get() *AddressTypeCode {
	return v.value
}

func (v *NullableAddressTypeCode) Set(val *AddressTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTypeCode(val *AddressTypeCode) *NullableAddressTypeCode {
	return &NullableAddressTypeCode{value: val, isSet: true}
}

func (v NullableAddressTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

