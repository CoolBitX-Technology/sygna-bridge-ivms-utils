/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
	"fmt"
)

// NationalIdentifierTypeCode the model 'NationalIdentifierTypeCode'
type NationalIdentifierTypeCode string

// List of NationalIdentifierTypeCode
const (
	NATIONALIDENTIFIERTYPECODE_ARNU NationalIdentifierTypeCode = "ARNU"
	NATIONALIDENTIFIERTYPECODE_CCPT NationalIdentifierTypeCode = "CCPT"
	NATIONALIDENTIFIERTYPECODE_RAID NationalIdentifierTypeCode = "RAID"
	NATIONALIDENTIFIERTYPECODE_DRLC NationalIdentifierTypeCode = "DRLC"
	NATIONALIDENTIFIERTYPECODE_FIIN NationalIdentifierTypeCode = "FIIN"
	NATIONALIDENTIFIERTYPECODE_TXID NationalIdentifierTypeCode = "TXID"
	NATIONALIDENTIFIERTYPECODE_SOCS NationalIdentifierTypeCode = "SOCS"
	NATIONALIDENTIFIERTYPECODE_IDCD NationalIdentifierTypeCode = "IDCD"
	NATIONALIDENTIFIERTYPECODE_LEIX NationalIdentifierTypeCode = "LEIX"
	NATIONALIDENTIFIERTYPECODE_MISC NationalIdentifierTypeCode = "MISC"
)

// All allowed values of NationalIdentifierTypeCode enum
var AllowedNationalIdentifierTypeCodeEnumValues = []NationalIdentifierTypeCode{
	"ARNU",
	"CCPT",
	"RAID",
	"DRLC",
	"FIIN",
	"TXID",
	"SOCS",
	"IDCD",
	"LEIX",
	"MISC",
}

func (v *NationalIdentifierTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NationalIdentifierTypeCode(value)
	for _, existing := range AllowedNationalIdentifierTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NationalIdentifierTypeCode", value)
}

// NewNationalIdentifierTypeCodeFromValue returns a pointer to a valid NationalIdentifierTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNationalIdentifierTypeCodeFromValue(v string) (*NationalIdentifierTypeCode, error) {
	ev := NationalIdentifierTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NationalIdentifierTypeCode: valid values are %v", v, AllowedNationalIdentifierTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NationalIdentifierTypeCode) IsValid() bool {
	for _, existing := range AllowedNationalIdentifierTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NationalIdentifierTypeCode value
func (v NationalIdentifierTypeCode) Ptr() *NationalIdentifierTypeCode {
	return &v
}

type NullableNationalIdentifierTypeCode struct {
	value *NationalIdentifierTypeCode
	isSet bool
}

func (v NullableNationalIdentifierTypeCode) Get() *NationalIdentifierTypeCode {
	return v.value
}

func (v *NullableNationalIdentifierTypeCode) Set(val *NationalIdentifierTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableNationalIdentifierTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableNationalIdentifierTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNationalIdentifierTypeCode(val *NationalIdentifierTypeCode) *NullableNationalIdentifierTypeCode {
	return &NullableNationalIdentifierTypeCode{value: val, isSet: true}
}

func (v NullableNationalIdentifierTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNationalIdentifierTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

