/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LegalPerson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegalPerson{}

// LegalPerson struct for LegalPerson
type LegalPerson struct {
	Name LegalPersonName `json:"name"`
	GeographicAddress []Address `json:"geographicAddress,omitempty"`
	CustomerNumber *string `json:"customerNumber,omitempty"`
	NationalIdentification *NationalIdentification `json:"nationalIdentification,omitempty"`
	CountryOfRegistration *string `json:"countryOfRegistration,omitempty"`
}

type _LegalPerson LegalPerson

// NewLegalPerson instantiates a new LegalPerson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalPerson(name LegalPersonName) *LegalPerson {
	this := LegalPerson{}
	this.Name = name
	return &this
}

// NewLegalPersonWithDefaults instantiates a new LegalPerson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalPersonWithDefaults() *LegalPerson {
	this := LegalPerson{}
	return &this
}

// GetName returns the Name field value
func (o *LegalPerson) GetName() LegalPersonName {
	if o == nil {
		var ret LegalPersonName
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LegalPerson) GetNameOk() (*LegalPersonName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LegalPerson) SetName(v LegalPersonName) {
	o.Name = v
}

// GetGeographicAddress returns the GeographicAddress field value if set, zero value otherwise.
func (o *LegalPerson) GetGeographicAddress() []Address {
	if o == nil || IsNil(o.GeographicAddress) {
		var ret []Address
		return ret
	}
	return o.GeographicAddress
}

// GetGeographicAddressOk returns a tuple with the GeographicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPerson) GetGeographicAddressOk() ([]Address, bool) {
	if o == nil || IsNil(o.GeographicAddress) {
		return nil, false
	}
	return o.GeographicAddress, true
}

// HasGeographicAddress returns a boolean if a field has been set.
func (o *LegalPerson) HasGeographicAddress() bool {
	if o != nil && !IsNil(o.GeographicAddress) {
		return true
	}

	return false
}

// SetGeographicAddress gets a reference to the given []Address and assigns it to the GeographicAddress field.
func (o *LegalPerson) SetGeographicAddress(v []Address) {
	o.GeographicAddress = v
}

// GetCustomerNumber returns the CustomerNumber field value if set, zero value otherwise.
func (o *LegalPerson) GetCustomerNumber() string {
	if o == nil || IsNil(o.CustomerNumber) {
		var ret string
		return ret
	}
	return *o.CustomerNumber
}

// GetCustomerNumberOk returns a tuple with the CustomerNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPerson) GetCustomerNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerNumber) {
		return nil, false
	}
	return o.CustomerNumber, true
}

// HasCustomerNumber returns a boolean if a field has been set.
func (o *LegalPerson) HasCustomerNumber() bool {
	if o != nil && !IsNil(o.CustomerNumber) {
		return true
	}

	return false
}

// SetCustomerNumber gets a reference to the given string and assigns it to the CustomerNumber field.
func (o *LegalPerson) SetCustomerNumber(v string) {
	o.CustomerNumber = &v
}

// GetNationalIdentification returns the NationalIdentification field value if set, zero value otherwise.
func (o *LegalPerson) GetNationalIdentification() NationalIdentification {
	if o == nil || IsNil(o.NationalIdentification) {
		var ret NationalIdentification
		return ret
	}
	return *o.NationalIdentification
}

// GetNationalIdentificationOk returns a tuple with the NationalIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPerson) GetNationalIdentificationOk() (*NationalIdentification, bool) {
	if o == nil || IsNil(o.NationalIdentification) {
		return nil, false
	}
	return o.NationalIdentification, true
}

// HasNationalIdentification returns a boolean if a field has been set.
func (o *LegalPerson) HasNationalIdentification() bool {
	if o != nil && !IsNil(o.NationalIdentification) {
		return true
	}

	return false
}

// SetNationalIdentification gets a reference to the given NationalIdentification and assigns it to the NationalIdentification field.
func (o *LegalPerson) SetNationalIdentification(v NationalIdentification) {
	o.NationalIdentification = &v
}

// GetCountryOfRegistration returns the CountryOfRegistration field value if set, zero value otherwise.
func (o *LegalPerson) GetCountryOfRegistration() string {
	if o == nil || IsNil(o.CountryOfRegistration) {
		var ret string
		return ret
	}
	return *o.CountryOfRegistration
}

// GetCountryOfRegistrationOk returns a tuple with the CountryOfRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPerson) GetCountryOfRegistrationOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOfRegistration) {
		return nil, false
	}
	return o.CountryOfRegistration, true
}

// HasCountryOfRegistration returns a boolean if a field has been set.
func (o *LegalPerson) HasCountryOfRegistration() bool {
	if o != nil && !IsNil(o.CountryOfRegistration) {
		return true
	}

	return false
}

// SetCountryOfRegistration gets a reference to the given string and assigns it to the CountryOfRegistration field.
func (o *LegalPerson) SetCountryOfRegistration(v string) {
	o.CountryOfRegistration = &v
}

func (o LegalPerson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegalPerson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.GeographicAddress) {
		toSerialize["geographicAddress"] = o.GeographicAddress
	}
	if !IsNil(o.CustomerNumber) {
		toSerialize["customerNumber"] = o.CustomerNumber
	}
	if !IsNil(o.NationalIdentification) {
		toSerialize["nationalIdentification"] = o.NationalIdentification
	}
	if !IsNil(o.CountryOfRegistration) {
		toSerialize["countryOfRegistration"] = o.CountryOfRegistration
	}
	return toSerialize, nil
}

func (o *LegalPerson) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegalPerson := _LegalPerson{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegalPerson)

	if err != nil {
		return err
	}

	*o = LegalPerson(varLegalPerson)

	return err
}

type NullableLegalPerson struct {
	value *LegalPerson
	isSet bool
}

func (v NullableLegalPerson) Get() *LegalPerson {
	return v.value
}

func (v *NullableLegalPerson) Set(val *LegalPerson) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalPerson) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalPerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalPerson(val *LegalPerson) *NullableLegalPerson {
	return &NullableLegalPerson{value: val, isSet: true}
}

func (v NullableLegalPerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalPerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


