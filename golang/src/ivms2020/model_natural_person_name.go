/*
Bridge

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ivms101

import (
	"encoding/json"
)

// checks if the NaturalPersonName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NaturalPersonName{}

// NaturalPersonName struct for NaturalPersonName
type NaturalPersonName struct {
	NameIdentifier []NaturalPersonNameId `json:"nameIdentifier,omitempty"`
	LocalNameIdentifier []LocalNaturalPersonNameId `json:"localNameIdentifier,omitempty"`
	PhoneticNameIdentifier []LocalNaturalPersonNameId `json:"phoneticNameIdentifier,omitempty"`
}

// NewNaturalPersonName instantiates a new NaturalPersonName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNaturalPersonName() *NaturalPersonName {
	this := NaturalPersonName{}
	return &this
}

// NewNaturalPersonNameWithDefaults instantiates a new NaturalPersonName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNaturalPersonNameWithDefaults() *NaturalPersonName {
	this := NaturalPersonName{}
	return &this
}

// GetNameIdentifier returns the NameIdentifier field value if set, zero value otherwise.
func (o *NaturalPersonName) GetNameIdentifier() []NaturalPersonNameId {
	if o == nil || IsNil(o.NameIdentifier) {
		var ret []NaturalPersonNameId
		return ret
	}
	return o.NameIdentifier
}

// GetNameIdentifierOk returns a tuple with the NameIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NaturalPersonName) GetNameIdentifierOk() ([]NaturalPersonNameId, bool) {
	if o == nil || IsNil(o.NameIdentifier) {
		return nil, false
	}
	return o.NameIdentifier, true
}

// HasNameIdentifier returns a boolean if a field has been set.
func (o *NaturalPersonName) HasNameIdentifier() bool {
	if o != nil && !IsNil(o.NameIdentifier) {
		return true
	}

	return false
}

// SetNameIdentifier gets a reference to the given []NaturalPersonNameId and assigns it to the NameIdentifier field.
func (o *NaturalPersonName) SetNameIdentifier(v []NaturalPersonNameId) {
	o.NameIdentifier = v
}

// GetLocalNameIdentifier returns the LocalNameIdentifier field value if set, zero value otherwise.
func (o *NaturalPersonName) GetLocalNameIdentifier() []LocalNaturalPersonNameId {
	if o == nil || IsNil(o.LocalNameIdentifier) {
		var ret []LocalNaturalPersonNameId
		return ret
	}
	return o.LocalNameIdentifier
}

// GetLocalNameIdentifierOk returns a tuple with the LocalNameIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NaturalPersonName) GetLocalNameIdentifierOk() ([]LocalNaturalPersonNameId, bool) {
	if o == nil || IsNil(o.LocalNameIdentifier) {
		return nil, false
	}
	return o.LocalNameIdentifier, true
}

// HasLocalNameIdentifier returns a boolean if a field has been set.
func (o *NaturalPersonName) HasLocalNameIdentifier() bool {
	if o != nil && !IsNil(o.LocalNameIdentifier) {
		return true
	}

	return false
}

// SetLocalNameIdentifier gets a reference to the given []LocalNaturalPersonNameId and assigns it to the LocalNameIdentifier field.
func (o *NaturalPersonName) SetLocalNameIdentifier(v []LocalNaturalPersonNameId) {
	o.LocalNameIdentifier = v
}

// GetPhoneticNameIdentifier returns the PhoneticNameIdentifier field value if set, zero value otherwise.
func (o *NaturalPersonName) GetPhoneticNameIdentifier() []LocalNaturalPersonNameId {
	if o == nil || IsNil(o.PhoneticNameIdentifier) {
		var ret []LocalNaturalPersonNameId
		return ret
	}
	return o.PhoneticNameIdentifier
}

// GetPhoneticNameIdentifierOk returns a tuple with the PhoneticNameIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NaturalPersonName) GetPhoneticNameIdentifierOk() ([]LocalNaturalPersonNameId, bool) {
	if o == nil || IsNil(o.PhoneticNameIdentifier) {
		return nil, false
	}
	return o.PhoneticNameIdentifier, true
}

// HasPhoneticNameIdentifier returns a boolean if a field has been set.
func (o *NaturalPersonName) HasPhoneticNameIdentifier() bool {
	if o != nil && !IsNil(o.PhoneticNameIdentifier) {
		return true
	}

	return false
}

// SetPhoneticNameIdentifier gets a reference to the given []LocalNaturalPersonNameId and assigns it to the PhoneticNameIdentifier field.
func (o *NaturalPersonName) SetPhoneticNameIdentifier(v []LocalNaturalPersonNameId) {
	o.PhoneticNameIdentifier = v
}

func (o NaturalPersonName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NaturalPersonName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NameIdentifier) {
		toSerialize["nameIdentifier"] = o.NameIdentifier
	}
	if !IsNil(o.LocalNameIdentifier) {
		toSerialize["localNameIdentifier"] = o.LocalNameIdentifier
	}
	if !IsNil(o.PhoneticNameIdentifier) {
		toSerialize["phoneticNameIdentifier"] = o.PhoneticNameIdentifier
	}
	return toSerialize, nil
}

type NullableNaturalPersonName struct {
	value *NaturalPersonName
	isSet bool
}

func (v NullableNaturalPersonName) Get() *NaturalPersonName {
	return v.value
}

func (v *NullableNaturalPersonName) Set(val *NaturalPersonName) {
	v.value = val
	v.isSet = true
}

func (v NullableNaturalPersonName) IsSet() bool {
	return v.isSet
}

func (v *NullableNaturalPersonName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNaturalPersonName(val *NaturalPersonName) *NullableNaturalPersonName {
	return &NullableNaturalPersonName{value: val, isSet: true}
}

func (v NullableNaturalPersonName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNaturalPersonName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


