/*
 * Bridge
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package ivms101

import (
	"encoding/json"
)

// LegalPersonName struct for LegalPersonName
type LegalPersonName struct {
	NameIdentifiers *[]LegalPersonNameId `json:"name_identifiers,omitempty"`
	LocalNameIdentifiers *[]LocalLegalPersonNameId `json:"local_name_identifiers,omitempty"`
	PhoneticNameIdentifiers *[]LocalLegalPersonNameId `json:"phonetic_name_identifiers,omitempty"`
}

// NewLegalPersonName instantiates a new LegalPersonName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalPersonName() *LegalPersonName {
	this := LegalPersonName{}
	return &this
}

// NewLegalPersonNameWithDefaults instantiates a new LegalPersonName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalPersonNameWithDefaults() *LegalPersonName {
	this := LegalPersonName{}
	return &this
}

// GetNameIdentifiers returns the NameIdentifiers field value if set, zero value otherwise.
func (o *LegalPersonName) GetNameIdentifiers() []LegalPersonNameId {
	if o == nil || o.NameIdentifiers == nil {
		var ret []LegalPersonNameId
		return ret
	}
	return *o.NameIdentifiers
}

// GetNameIdentifiersOk returns a tuple with the NameIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPersonName) GetNameIdentifiersOk() (*[]LegalPersonNameId, bool) {
	if o == nil || o.NameIdentifiers == nil {
		return nil, false
	}
	return o.NameIdentifiers, true
}

// HasNameIdentifiers returns a boolean if a field has been set.
func (o *LegalPersonName) HasNameIdentifiers() bool {
	if o != nil && o.NameIdentifiers != nil {
		return true
	}

	return false
}

// SetNameIdentifiers gets a reference to the given []LegalPersonNameId and assigns it to the NameIdentifiers field.
func (o *LegalPersonName) SetNameIdentifiers(v []LegalPersonNameId) {
	o.NameIdentifiers = &v
}

// GetLocalNameIdentifiers returns the LocalNameIdentifiers field value if set, zero value otherwise.
func (o *LegalPersonName) GetLocalNameIdentifiers() []LocalLegalPersonNameId {
	if o == nil || o.LocalNameIdentifiers == nil {
		var ret []LocalLegalPersonNameId
		return ret
	}
	return *o.LocalNameIdentifiers
}

// GetLocalNameIdentifiersOk returns a tuple with the LocalNameIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPersonName) GetLocalNameIdentifiersOk() (*[]LocalLegalPersonNameId, bool) {
	if o == nil || o.LocalNameIdentifiers == nil {
		return nil, false
	}
	return o.LocalNameIdentifiers, true
}

// HasLocalNameIdentifiers returns a boolean if a field has been set.
func (o *LegalPersonName) HasLocalNameIdentifiers() bool {
	if o != nil && o.LocalNameIdentifiers != nil {
		return true
	}

	return false
}

// SetLocalNameIdentifiers gets a reference to the given []LocalLegalPersonNameId and assigns it to the LocalNameIdentifiers field.
func (o *LegalPersonName) SetLocalNameIdentifiers(v []LocalLegalPersonNameId) {
	o.LocalNameIdentifiers = &v
}

// GetPhoneticNameIdentifiers returns the PhoneticNameIdentifiers field value if set, zero value otherwise.
func (o *LegalPersonName) GetPhoneticNameIdentifiers() []LocalLegalPersonNameId {
	if o == nil || o.PhoneticNameIdentifiers == nil {
		var ret []LocalLegalPersonNameId
		return ret
	}
	return *o.PhoneticNameIdentifiers
}

// GetPhoneticNameIdentifiersOk returns a tuple with the PhoneticNameIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalPersonName) GetPhoneticNameIdentifiersOk() (*[]LocalLegalPersonNameId, bool) {
	if o == nil || o.PhoneticNameIdentifiers == nil {
		return nil, false
	}
	return o.PhoneticNameIdentifiers, true
}

// HasPhoneticNameIdentifiers returns a boolean if a field has been set.
func (o *LegalPersonName) HasPhoneticNameIdentifiers() bool {
	if o != nil && o.PhoneticNameIdentifiers != nil {
		return true
	}

	return false
}

// SetPhoneticNameIdentifiers gets a reference to the given []LocalLegalPersonNameId and assigns it to the PhoneticNameIdentifiers field.
func (o *LegalPersonName) SetPhoneticNameIdentifiers(v []LocalLegalPersonNameId) {
	o.PhoneticNameIdentifiers = &v
}

func (o LegalPersonName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NameIdentifiers != nil {
		toSerialize["name_identifiers"] = o.NameIdentifiers
	}
	if o.LocalNameIdentifiers != nil {
		toSerialize["local_name_identifiers"] = o.LocalNameIdentifiers
	}
	if o.PhoneticNameIdentifiers != nil {
		toSerialize["phonetic_name_identifiers"] = o.PhoneticNameIdentifiers
	}
	return json.Marshal(toSerialize)
}

type NullableLegalPersonName struct {
	value *LegalPersonName
	isSet bool
}

func (v NullableLegalPersonName) Get() *LegalPersonName {
	return v.value
}

func (v *NullableLegalPersonName) Set(val *LegalPersonName) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalPersonName) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalPersonName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalPersonName(val *LegalPersonName) *NullableLegalPersonName {
	return &NullableLegalPersonName{value: val, isSet: true}
}

func (v NullableLegalPersonName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalPersonName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


