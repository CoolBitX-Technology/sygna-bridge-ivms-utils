/*
 * Bridge
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package ivms101

import (
	"encoding/json"
)

// OriginatingVasp struct for OriginatingVasp
type OriginatingVasp struct {
	OriginatingVasp *Person `json:"originating_vasp,omitempty"`
}

// NewOriginatingVasp instantiates a new OriginatingVasp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginatingVasp() *OriginatingVasp {
	this := OriginatingVasp{}
	return &this
}

// NewOriginatingVaspWithDefaults instantiates a new OriginatingVasp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginatingVaspWithDefaults() *OriginatingVasp {
	this := OriginatingVasp{}
	return &this
}

// GetOriginatingVasp returns the OriginatingVasp field value if set, zero value otherwise.
func (o *OriginatingVasp) GetOriginatingVasp() Person {
	if o == nil || o.OriginatingVasp == nil {
		var ret Person
		return ret
	}
	return *o.OriginatingVasp
}

// GetOriginatingVaspOk returns a tuple with the OriginatingVasp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginatingVasp) GetOriginatingVaspOk() (*Person, bool) {
	if o == nil || o.OriginatingVasp == nil {
		return nil, false
	}
	return o.OriginatingVasp, true
}

// HasOriginatingVasp returns a boolean if a field has been set.
func (o *OriginatingVasp) HasOriginatingVasp() bool {
	if o != nil && o.OriginatingVasp != nil {
		return true
	}

	return false
}

// SetOriginatingVasp gets a reference to the given Person and assigns it to the OriginatingVasp field.
func (o *OriginatingVasp) SetOriginatingVasp(v Person) {
	o.OriginatingVasp = &v
}

func (o OriginatingVasp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OriginatingVasp != nil {
		toSerialize["originating_vasp"] = o.OriginatingVasp
	}
	return json.Marshal(toSerialize)
}

type NullableOriginatingVasp struct {
	value *OriginatingVasp
	isSet bool
}

func (v NullableOriginatingVasp) Get() *OriginatingVasp {
	return v.value
}

func (v *NullableOriginatingVasp) Set(val *OriginatingVasp) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginatingVasp) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginatingVasp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginatingVasp(val *OriginatingVasp) *NullableOriginatingVasp {
	return &NullableOriginatingVasp{value: val, isSet: true}
}

func (v NullableOriginatingVasp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginatingVasp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


